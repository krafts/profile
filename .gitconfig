[core]
  editor = vim #atom --wait
  excludesfile = ~/.gitignore_global
  mergeoptions = --no-edit
  whitespace = trailing-space,blank-at-eof,space-before-tab,-indent-with-non-tab,tab-in-indent,-cr-at-eol
#  pager = diff-so-fancy | less --tabs=4 -RFX
[push]
  default = simple

#[merge]
#  tool = vimdiff

#[mergetool]
#  prompt = false

#[diff]
#  tool = sublimerge

#[difftool "sublimerge"]
#  cmd = subl -n --wait \"$REMOTE\" \"$LOCAL\" --command \"sublimerge_diff_views {\\\"left_read_only\\\": true, \\\"right_read_only\\\": true}\"

[mergetool "smerge"]
  cmd = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
  trustExitCode = true

[merge]
  tool = smerge

[diff]
  tool = smerge

[difftool]
  prompt = false

[difftool "smerge"]
  cmd = smerge -n \"$REMOTE\" \"$LOCAL\"

#[credential]
#  helper = osxkeychain

[alias]
  git = !exec git
  sha = rev-parse HEAD
  ecg = config --global -e
  ecl = config --local -e
  ci = commit
  b = branch
  bra = branch --all
  co = checkout
  a = add
  air = add --ignore-removal
  rs = reset
  df = diff
  dc = diff --cached
  dfs = diff --stat
  dcs = diff --cached --stat
  who = shortlog -s --
  cl = clean
  clf = clean -f
  cld = clean -d
  clfd = clean -fd
  cliff = clean -f
  cliffd = clean -fd
  k = !gitk -all&
  ft = fetch
  mg = merge
  pl = pull --rebase
  po = pull --rebase origin
  ps = push
  bl = blame -n
  s = status --short --branch
  fs = "!_() { git co develop && git pl && git flow feature start \"$@\" && git fp; }; _"
  fp = "!git flow feature publish $(git rev-parse --abbrev-ref HEAD | sed 's/feature\\///g')"
  fr = "!_() { b=$(git rev-parse --abbrev-ref HEAD) && if echo $b | grep -vq -e ^feature 2>&1>/dev/null; then echo \"$b is not a feature, cannot proceed\"; exit 1; fi && git co develop && git pl && git co $b && git flow feature rebase && git psf; }; _"
  poo = "!_() { branch=\"$@\"; if [ $(git bra | grep  \"remotes/origin/$branch\" | wc -l) -le 0 ]; then echo \"$branch does not exist on origin\"; exit 0; fi; printf \"DELETE $branch on origin! [y/N]: \"; read answer; if echo \"$answer\" | grep -iq \"^y\"; then git push origin :$branch; fi; }; _"
  dodo = "!git poo $(git rev-parse --abbrev-ref HEAD)"
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cI %cr) %C(bold blue)<%an>%Creset'
  lgr = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
  lge = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cI %cr) %C(bold blue)<%an [%ae]>%Creset'
  abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %cI %an %s%n\" $commit; done' -"
#  abbrbr = "!sh -c 'git rev-list --branches --reverse | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%C(yellow)%d%Creset %H %cI %an %s%n\" $commit; done' -"
  oneline = "!_() { $(test $# -eq 0 && echo xargs -L1) git log --no-walk --decorate --oneline \"$@\"; }; _"
  tips = "!_() { t=$(git rev-list --no-merges --max-count=1 \"$@\"); if test -n \"$t\"; then echo $t; _ \"$@\" ^$t; fi; }; _"
  forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -
  alias = config --get-regexp ^alias\\.
  sob = "!_() { git branch --remotes | grep -vi head | while read i; do git --no-pager log -n1 --pretty=format:'%Cgreen%cI%Creset %Cred%H%Creset %C(yellow)%d%Creset  %an %s%n' $i ; done | sort -n; }; _"
  sobr = "!_() { git branch --remotes | grep -vi head | while read i; do git --no-pager log -n1 --pretty=format:'%Cgreen%cI%Creset %Cred%H%Creset %C(yellow)%d%Creset  %an %s%n' $i ; done | sort -nr; }; _"
  st = stash
  sti = stash --include-untracked
  stp = stash push
  ##stop = stash pop
  slap = stash apply
  still = stash list
  info = remote -v
  rc = rebase --continue
  ra = rebase --abort
  sh = show
  hf = "!_() { b=$(git rev-parse --abbrev-ref HEAD) && git hr && git co develop && git pl && git co $b && h=$(echo $b | sed 's/hotfix\\///g') && git flow hotfix finish -m hotfix_finished_on_$(date +'%Y-%m-%dT%H:%M:%S%z') $h && git co master && git ps && git co develop && git ps && git ps --tags && git poo $b && git dlb $b; }; _"
  hs = "!_() { git co  master && git pl && git flow hotfix start \"$@\" && git hp; }; _"
  hr = "!_() { b=$(git rev-parse --abbrev-ref HEAD) && if echo $b | grep -vq ^hotfix 2>&1>/dev/null; then echo \"$b is not a hotfix, cannot proceed\"; exit 1; fi && git co master && git pl && git co $b && git rebase master && git psf; }; _"
  hp = "!_() { git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD); }; _"
  cr = diff develop -U30

  crh = diff master -U30
  ff = "!_() { b=$(git rev-parse --abbrev-ref HEAD) && git fr && git flow feature finish $(echo $b | sed 's/feature\\///g') && git ps && git poo $b && git dlb $b; }; _"
  punt = "!_() { git remote prune origin && git branch -vv | grep ': gone] ' | awk '{print $1}' | xargs git branch -D; }; _"
  dlb = "!_() { branch=\"$@\" && git rev-parse --verify --quiet \"$branch\" 2>&1>/dev/null && printf \"DELETE local branch $branch [y/N]: \"; read answer; if echo \"$answer\" | grep -iq \"^y\"; then git b -D \"$branch\"; fi; }; _"
  psf = "!_() { branch=$(git rev-parse --abbrev-ref HEAD); if [ \"$branch\" == \"develop\" ]; then echo \"cannot force push develop\"; exit 1; elif [ \"$branch\" == \"master\" ]; then echo \"cannot force push master\"; exit 1; else git ps --force; fi; }; _"
  account = "!_() { git remote -v | awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $1}' | sort | uniq | head -1; }; _"
  repo = "!_() { git remote -v | awk -F':' '{print $2}' | awk '{print $1}' | awk -F'/' '{print $2}' | awk -F'.' '{print $1}' | sort | uniq | head -1; }; _"
  prbase = "!_() { b=$(git rev-parse --abbrev-ref HEAD) && if echo $b | grep -q ^hotfix 2>&1>/dev/null; then echo master; elif echo $b | grep -q ^feature 2>&1>/dev/null; then echo develop; fi; }; _"
  brn = rev-parse --abbrev-ref HEAD
  gfpr = "!_() { b=$(git brn) && pr_base=$(git prbase) && token=$(cat ~/.github_git_alias_auth_token) && if echo $b | grep -vq -e ^hotfix -e ^feature 2>&1>/dev/null; then echo \"not a hotfix or feature, cannot create pull request.\"; exit 1; fi && curl -H \"Authorization: token $token\" -H \"Content-Type: application/json\" --data \"{ \\\"title\\\": \\\"$b\\\", \\\"body\\\": \\\"$(git log --oneline --abbrev-commit $b ^$pr_base --no-merges | sed 's/$/\\\\\\\\\\\\n/' | tr -d '\\n')\\\", \\\"head\\\": \\\"$b\\\", \\\"base\\\": \\\"$pr_base\\\" }\" https://api.github.com/repos/$(git account)/$(git repo)/pulls; }; _"
  commend = commit --amend --no-edit
  #pr = "!_() { b=$(git brn) && token=$(cat ~/.github_git_alias_auth_token) && if echo $b | grep -vq -e ^hotfix -e ^feature 2>&1>/dev/null; then echo \"not a hotfix or feature, cannot create pull request.\"; exit 1; fi && curl -H \"Authorization: token $token\" -H \"Content-Type: application/json\" --data \"{ \\\"title\\\": \\\"$b\\\", \\\"body\\\": \\\"Please pull this in!\\\", \\\"head\\\": \\\"$b\\\", \\\"base\\\": \\\"$(git prbase)\\\", \\\"assignees\\\": [ $(cat ~/.github_git_alias_assignee_list) ] }\" https://api.github.com/repos/$(git account)/$(git repo)/pulls; }; _"
  rb = "!_() { branch=$(git brn) && if [ \"$branch\" == \"master\" ]; then echo \"cannot rebase master into master\"; exit 1; fi && git pl && git co master && git pl && git co $branch && git rebase master && git psf; }; _"
  #af = "!_() { branch=$(git brn) && if [ \"$branch\" == \"master\" ]; then echo \"cannot merge master into master\"; exit 1; fi && git ar && git co master && git merge --no-ff $branch && git ci && git ps && git ps --tags && git poo $branch && git dlb $branch; }; _"
  bf = "!_() { branch=$(git brn) && if [ \"$branch\" == \"master\" ]; then echo \"cannot merge master into master\"; exit 1; fi && git ar && git co master && git merge --squash $branch && git ci && git ps && git ps --tags && git poo $branch && git dlb $branch; }; _"
  pr = "!_() { set -x; branch=$(git brn) && token=$(cat ~/.github_git_alias_auth_token) && if [ \"$branch\" == \"master\" ]; then echo \"branch is master, cannot create pull request.\"; exit 1; fi && curl -H \"Authorization: token $token\" -H \"Content-Type: application/json\" --data \"{ \\\"title\\\": \\\"$branch\\\", \\\"body\\\": \\\"$(git log --oneline --abbrev-commit $branch ^master --no-merges | sed 's/$/\\\\\\\\\\\\n/' | tr -d '\\n')\\\", \\\"head\\\": \\\"$branch\\\", \\\"base\\\": \\\"master\\\", \\\"requested_reviewers\\\": [$(cat ~/.github_git_alias_assignee_list)] }\" https://api.github.com/repos/$(git account)/$(git repo)/pulls; }; _"
  bs = "!_() { branch=$(git brn) && if [ \"$branch\" != \"master\" ]; then echo \"cannot start a branch from anything else other than master\"; exit 1; fi && git pl && git b \"$1\" && git co \"$1\" && git ps -u origin \"$1\"; }; _"
  #aft = "!_() { branch=$(git brn) && if [ \"$branch\" == \"master\" ]; then echo \"cannot merge master into master\"; exit 1; fi && git rb && git co master && pr_number=$(curl -H \\\"Authorization: token $(cat ~/.github_git_alias_auth_token)\\\" -H \\\"Content-Type: application/json\\\" https://api.github.com/repos/$(git account)/$(git repo)/pulls; | jq '.[]| {(.head.ref): .number}' | grep \"$branch\" | awk '{print $2}') && echo $pr_number; }; _"
  brr = "!_() { branch=$(git brn) && if [ \"$branch\" == \"master\" ]; then echo \"cannot change the name of branch master\"; exit 1; fi && if [ \"$branch\" == \"$1\" ]; then echo \"branch is already named $1\"; exit 1; fi && printf \"Change branch name from $branch to $1 [y/N]: \"; read answer; if echo \"$answer\" | grep -iq \"^y\"; then git b --unset-upstream && git b -m \"$branch\" \"$1\" && git push --set-upstream origin \"$1\" && git poo \"$branch\"; fi; }; _"
  ap = -c interactive.diffFilter=\"diff-highlight\" add -p
  nr = name-rev ## find a commit belongs to which branch
  findcommit = name-rev ## find a commit belongs to which branch
  fc = name-rev ## find a commit belongs to which branch
  sq = "!_() { git reset --soft \"$1\" && git commit --edit -m\"$(git log --format=%B --reverse HEAD..HEAD@{1})\"; }; _"
  psu = "!_() { branch=$(git rev-parse --abbrev-ref HEAD); git push --set-upstream origin \"$branch\"; }; _"
  db = "!_() { git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'; }; _"
  nf = "!_() { branch=$(git rev-parse --abbrev-ref HEAD); if [ \"$branch\" != \"main\" ] && [ \"$branch\" != \"master\" ]; then echo \"cannot create feature/fix branch from ${branch}, can only do this from main or master\"; exit 1; fi; git checkout ${branch} && git pull --rebase && git punt && git checkout -b \"$1\" || git checkout \"$1\" && git push --set-upstream origin \"$1\"; }; _"
  amd = commit --amend -C HEAD@{1}
  rsa = commit --amend --reset-author --no-edit
  wt = worktree
  wtl = worktree list
  wta = worktree add
  wtr = worktree remove
  wtm = worktree move

## chlogm =  !sh -c 'git log $1...$2  --pretty=format:\"%s [view commit](http://github.com/$3/$4/commit/%H) \"' ## https://coderwall.com/p/5cv5lg/generate-your-changelogs-with-git-log, top comment by bainternet

[branch]
  autosetuprebase = always

[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true

[pager]
  log = diff-highlight | less
  show = diff-highlight | less
  diff = diff-highlight | less

[filter "trimWhitespace"]
  clean = git-stripspace
[credential]
	helper = osxkeychain
